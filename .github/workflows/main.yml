name: Tests
on: [push, pull_request]
jobs:
  tests:
    name: (PHP ${{ matrix.php-versions }})
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mariadb:10.2
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: nette-sandbox
        ports:
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['8.1', '8.2', '8.3']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          coverage: xdebug #optional
      - name: Restart mysql service
        run: sudo /etc/init.d/mysql restart
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader
      - name: Prepare configuration files
        run: |
          cp app/config/local.ci.neon app/config/local.neon
          cp tests/config/tests.local.ci.neon tests/config/tests.local.neon
      - name: Run Migrations
        run: php bin/console migrations:continue
      - name: Run CS
        run: vendor/bin/codesniffer app tests
      - name: Run PHPStan
        run: vendor/bin/phpstan analyse app -c phpstan.neon
      - name: Run Tests
        run: vendor/bin/tester -C tests
